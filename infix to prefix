#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Stack structure
struct Stack {
    int top;
    char arr[MAX];
};

// Function to create a stack
void initStack(struct Stack* stack) {
    stack->top = -1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, char ch) {
    if (stack->top < (MAX - 1)) {
        stack->arr[++(stack->top)] = ch;
    }
}

// Function to pop an element from the stack
char pop(struct Stack* stack) {
    if (stack->top >= 0) {
        return stack->arr[(stack->top)--];
    }
    return -1;
}

// Function to check if a character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

// Function to get precedence of an operator
int precedence(char ch) {
    if (ch == '+' || ch == '-') {
        return 1;
    } else if (ch == '*' || ch == '/') {
        return 2;
    }
    return 0;
}

// Function to reverse a string
void reverse(char* str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

// Function to convert infix to postfix
void infixToPostfix(char* infix, char* postfix) {
    struct Stack stack;
    initStack(&stack);
    int j = 0;
    
    for (int i = 0; infix[i] != '\0'; i++) {
        char ch = infix[i];
        
        // If the character is an operand, add it to the postfix expression
        if (isalnum(ch)) {
            postfix[j++] = ch;
        }
        // If the character is '(', push it onto the stack
        else if (ch == '(') {
            push(&stack, ch);
        }
        // If the character is ')', pop from the stack until '(' is found
        else if (ch == ')') {
            while (stack.top >= 0 && stack.arr[stack.top] != '(') {
                postfix[j++] = pop(&stack);
            }
            pop(&stack); // Pop '(' from the stack
        }
        // If the character is an operator
        else if (isOperator(ch)) {
            while (stack.top >= 0 && precedence(stack.arr[stack.top]) >= precedence(ch)) {
                postfix[j++] = pop(&stack);
            }
            push(&stack, ch);
        }
    }
    
    // Pop all remaining operators from the stack
    while (stack.top >= 0) {
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0'; // Null terminate the postfix string
}

// Function to convert infix to prefix
void infixToPrefix(char* infix, char* prefix) {
    // Step 1: Reverse the infix expression
    reverse(infix);
    
    // Step 2: Change the brackets - '(' becomes ')', and vice versa
    for (int i = 0; infix[i] != '\0'; i++) {
        if (infix[i] == '(') {
            infix[i] = ')';
        } else if (infix[i] == ')') {
            infix[i] = '(';
        }
    }
    
    // Step 3: Get the postfix of the modified expression
    char postfix[MAX];
    infixToPostfix(infix, postfix);
    
    // Step 4: Reverse the postfix expression to get the prefix expression
    reverse(postfix);
    
    // Copy the result to the prefix array
    strcpy(prefix, postfix);
}

int main() {
    char infix[MAX], prefix[MAX];
    
    printf("Enter infix expression: ");
    scanf("%s", infix);
    
    infixToPrefix(infix, prefix);
    
    printf("Prefix expression: %s\n", prefix);
    
    return 0;
}
